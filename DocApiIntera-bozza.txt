openapi: 3.0.4
info:
  title: Reservation - OpenAPI 3.0
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
tags:
  - name: reservation
    description: Prenotazioni
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: wishlist
    description: Lista Desideri
    externalDocs:
      description: Find out more
      url: https://swagger.io
paths:
  /reservation:
    post:
      tags:
        - reservation
      summary: Aggiungi una prenotazione.
      operationId: postReservation
      requestBody:
        description: Prenota un viaggio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/xml:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reservation/{reservationId}:
    get:
      tags:
        - reservation
      summary: Get a reservation.
      description: Get a single reservation.
      operationId: getReservation
      parameters:
        - name: reservationId
          in: path
          description: ID of reservation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid ID supplied
        '404':
          description: Reservation not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
       - reservation
      summary: Definetively delete a reservation.
      description: Delete a reservation from DB.
      operationId: deleteReservation
      parameters:
        - name: reservationId
          in: path
          description: Resevation Id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rows'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rows'
        '400':
          description: Invalid ID supplied
        '404':
          description: Reservation not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - reservation
      summary: Logical delete of a reservation.
      description: Change the isActive value of a reservation from true to false.
      operationId: deavtiveReservation
      parameters:
        - name: reservationId
          in: path
          description: Resevation Id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rows'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rows'
        '400':
          description: Invalid ID supplied
        '404':
          description: Reservation not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reservation/{userId}:
    get:
      tags:
        - reservation
      summary: Finds all user reservations.
      description: Finds all user reservations.
      operationId: findReservationsByUserId
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: minDate
          in: query
          description: Oldest date to search reservation
          required: false
          schema:
           type: string
           format: date
        - name: maxDate
          in: query
          description: Newest date to search reservation
          required: false
          schema:
           type: string
           format: date   
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
  /reservation/storico/{reservationId}:
    get:
      tags:
        - reservation
      summary: Get a storic reservation.
      description: Get a single storic reservation.
      operationId: getStoricReservation
      parameters:
        - name: reservationId
          in: path
          description: ID of reservation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid ID supplied
        '404':
          description: Reservation not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reservation/storico/{userId}:
    get:
      tags:
        - reservation
      summary: Finds all user storic reservations.
      description: Finds all user storic reservations.
      operationId: findStoricReservationsByUserId
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: minDate
          in: query
          description: Oldest date to search reservation
          required: false
          schema:
           type: string
           format: date
        - name: maxDate
          in: query
          description: Newest date to search reservation
          required: false
          schema:
           type: string
           format: date
      responses:
        '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Reservation'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
                
                
  /wishlist/{userId}:
    get:
      tags:
      - wishlist
      summary: Ottiene la wishlist di un utente
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Lista delle prenotazioni in wishlist
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    reservationId:
                      type: string
        "404":
          description: Utente non trovato
    delete:
      tags:
        - wishlist
      summary: Elimina la wishlist di un utente
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Wishlist eliminata
        "404":
          description: Utente non trovato

  /wishlist:
    post:
      tags:
        - wishlist
      summary: Aggiunge una prenotazione alla wishlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId:
                  type: string
              required:
                - reservationId
      responses:
        "201":
          description: Prenotazione aggiunta
    put:
      tags:
        - wishlist
      summary: Aggiorna la wishlist di un utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId:
                  type: string
                userId:
                  type: string
              required:
                - reservationId
                - userId
      responses:
        "200":
          description: Wishlist aggiornata
        "404":
          description: Utente o prenotazione non trovati

components:
  schemas:
    Reservation:
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
          example: 163
        userId:
          type: string
          example: MarioRossi
        isActive:
          type: boolean
          default: true
          example: true
      xml:
        name: reservation
    Rows:
      type: object
      properties:
        modifiedRows:
          type: integer
          format: int64
          example: 1
      xml:
        name: rows

    #User:
     # type: object
      #properties:
       # id:
        #  type: integer
         # format: int64
          #example: 10
        #username:
        #  type: string
         # example: theUser
        #firstName:
         # type: string
          #example: John
        #lastName:
         # type: string
          #example: James
        #email:
         # type: string
          #example: john@email.com
        #password:
         # type: string
          #example: '12345'
        #phone:
         # type: string
          #example: '12345'
        #userStatus:
         # type: integer
          #description: User Status
          #format: int32
          #example: 1
      #xml:
       # name: user
    #ApiResponse:
     # type: object
     # properties:
     #   code:
     #     type: integer
     #     format: int32
     #   type:
      #    type: string
     #   message:
     #     type: string
    #  xml:
    #    name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Reservation:
      description: Prenotazione viaggio
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reservation'
        application/xml:
          schema:
            $ref: '#/components/schemas/Reservation'
  
    #UserArray:
     # description: List of user object
      #content:
       # application/json:
        #  schema:
         #   type: array
          #  items:
           #   $ref: '#/components/schemas/User'
      
      
      
      
      
      
